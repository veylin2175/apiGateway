document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const createButton = document.getElementById('createButton');
    const createModal = document.getElementById('createModal');
    const closeModal = document.querySelector('.close');
    const cancelButton = document.getElementById('cancelCreate');
    const submitButton = document.getElementById('submitVoting');
    const addOptionButton = document.getElementById('addOption');
    const optionsContainer = document.getElementById('optionsContainer');

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    createButton.addEventListener('click', () => {
        createModal.style.display = 'flex';
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeModalHandler = () => {
        createModal.style.display = 'none';
    };

    closeModal.addEventListener('click', closeModalHandler);
    cancelButton.addEventListener('click', closeModalHandler);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    addOptionButton.addEventListener('click', () => {
        if (optionsContainer.children.length >= 4) {
            alert('–ú–∞–∫—Å–∏–º—É–º 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞');
            return;
        }

        const newOption = document.createElement('input');
        newOption.type = 'text';
        newOption.className = 'vote-option';
        newOption.placeholder = `–í–∞—Ä–∏–∞–Ω—Ç ${optionsContainer.children.length + 1}`;
        newOption.maxLength = 100;
        optionsContainer.appendChild(newOption);
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
    submitButton.addEventListener('click', async () => {
        const votingData = {
            title: document.getElementById('voteTitle').value,
            description: document.getElementById('voteDescription').value,
            is_private: document.querySelector('input[name="voteType"]:checked').value === 'private',
            min_votes: parseInt(document.getElementById('minVotes').value),
            end_date: new Date(document.getElementById('endDate').value).toISOString(),
            options: Array.from(document.querySelectorAll('.vote-option'))
                .map(input => input.value)
                .filter(text => text.trim() !== '')
        };

        if (!validateVoting(votingData)) return;

        try {
            const response = await fetch('/voting', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(votingData)
            });

            if (response.ok) {
                const result = await response.json();

                // –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
                //localStorage.setItem(`voting_${result.voting_id}`, JSON.stringify(result));

                alert(`–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! ID: ${result.voting_id}`);
                closeModalHandler();
                loadVotings();
            }
            else {
                const errorText = await response.text();
                console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ' + errorText);
            }

        } catch (error) {
            console.error('Error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
        }
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    async function loadVotings() {
        try {
            const response = await fetch('/voting'); // –ó–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'type=all'
            if (response.ok) {
                const votings = await response.json();
                renderVotings(votings);
            } else {
                console.error('Failed to load votings:', response.status, response.statusText);
            }
        } catch (error) {
            console.error('Error loading votings:', error);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    function validateVoting(data) {
        if (!data.title.trim()) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
            return false;
        }

        if (data.options.length < 2) {
            alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞');
            return false;
        }

        if (!data.end_date) {
            alert('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è');
            return false;
        }

        return true;
    }

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    loadVotings();
});

// –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
function renderVotings(votings) {
    const container = document.getElementById('votingsList');
    container.innerHTML = '';

    votings.forEach(voting => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—à–ª–æ —Å —Å–µ—Ä–≤–µ—Ä–∞)
        localStorage.setItem(`voting_${voting.id}`, JSON.stringify(voting));

        const card = document.createElement('div');
        card.className = 'voting-card';
        card.innerHTML = `
            <h3 class="voting-title">${voting.title}</h3>
            <p class="voting-description">${voting.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
            <div class="voting-meta">
                <span>–î–æ ${new Date(voting.end_date).toLocaleString()}</span>
                <span>${voting.is_private ? 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ' : 'üåç –ü—É–±–ª–∏—á–Ω–æ–µ'}</span>
            </div>
        `;
        container.appendChild(card);
    });
}
